cmake_minimum_required (VERSION 3.13) # req by add_link_options()

project (ctguard VERSION 0.1)

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/.cmake/")


option (ENABLE_DOC "Enable building documentation." ON)
option (ENABLE_OPTIMIZATIONS "Enable optimizations." ON)
option (ENABLE_HARDENING "Enable hardening build flags." ON)
option (FAIL_ON_WARNINGS "Fail on compiler warnings (e.g. pass -Werror)" ON)
option (FORCE_COLORED_OUTPUT "Force colored output (useful with Ninja)." ON)
option (ENABLE_SANITIZERS "Enable compiler sanitizers." OFF)
option (RUN_CLANG_TIDY "Run the clang-tidy static analyzer." OFF)


set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_STANDARD_REQUIRED TRUE)
set (CMAKE_CXX_EXTENSIONS FALSE)


if (ENABLE_OPTIMIZATIONS)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_compile_options (-O2)
    endif ()
endif ()

if (ENABLE_HARDENING)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_compile_definitions (FORTIFY_SOURCE=2)
        add_compile_options (-fstack-protector-strong)
        add_compile_options (-fPIE)
        add_link_options (-pie)
        add_link_options (LINKER:-z,relro)
        add_link_options (LINKER:-z,now)
    else ()
        message (FATAL_ERROR "Do not know how to set hardening build flags for compiler ${CMAKE_CXX_COMPILER_ID}!")
    endif ()
endif ()

if (ENABLE_SANITIZERS)
    if (ENABLE_OPTIMIZATIONS)
        message (FATAL_ERROR "Optimization must be turned off for sanitizers!")
    endif ()

    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_compile_options (-g)
        add_compile_options (-O1)

        add_compile_options (-fsanitize=address)
        add_compile_options (-fno-omit-frame-pointer)
        add_compile_options (-fsanitize=undefined)
        add_compile_options (-fsanitize=nullability)
        add_compile_options (-fsanitize=implicit-conversion)
        add_compile_options (-fsanitize=integer)

        add_link_options (-fsanitize=address)
        add_link_options (-fno-omit-frame-pointer)
        add_link_options (-fsanitize=undefined)
        add_link_options (-fsanitize=nullability)
        add_link_options (-fsanitize=implicit-conversion)
        add_link_options (-fsanitize=integer)
    else ()
        message (FATAL_ERROR "Do not know how to enable sanitizers for compiler ${CMAKE_CXX_COMPILER_ID}!")
    endif ()
endif ()

# hack to align status output
if (NOT CMAKE_CXX_FLAGS STREQUAL "")
    set (CMAKE_CXX_FLAGS " ${CMAKE_CXX_FLAGS}")
endif ()

if (FAIL_ON_WARNINGS)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
    else ()
        message (FATAL_ERROR "Do not know how to treat warnings as errors for compiler ${CMAKE_CXX_COMPILER_ID}!")
    endif ()
endif ()

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wdouble-promotion")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wformat=2")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wnull-dereference")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wmissing-include-dirs")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wunknown-pragmas")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsuggest-attribute=noreturn")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsuggest-attribute=format")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsuggest-final-types")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsuggest-final-methods")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsuggest-override")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Walloc-zero")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Walloca")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Warray-bounds=2")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wduplicated-branches")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wduplicated-cond")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfloat-equal")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wshadow")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpointer-arith")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wundef")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wunused-macros")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-qual")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wconversion")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsign-conversion")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wzero-as-null-pointer-constant")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wuseless-cast")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wlogical-op")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wmissing-declarations")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wredundant-decls")
    #set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Winline") # warns on empty struct destructors
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wvla")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wstack-protector")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 8)
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-align=strict")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra-semi")
    else ()
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-align")
    endif ()
    # C flags for sha2
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weverything")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-padded")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++98-compat")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++98-compat-pedantic")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6)
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-zero-as-null-pointer-constant") # warns on system headers
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-undefined-func-template") # warns on unspecialized scope_guard
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-variable-declarations") # warns on inline variable declarations
    endif ()
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 7)
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-return-std-move-in-c++11")
    endif ()
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 9)
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-ctad-maybe-unsupported") # produces fp's on std::lock_guard with clang-9
    endif ()
    # C flags for sha2
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
else ()
    message (WARNING "No warnings set for compiler ${CMAKE_CXX_COMPILER_ID}!")
endif ()


if (FORCE_COLORED_OUTPUT)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        add_compile_options (-fdiagnostics-color=always)
        add_link_options (-fdiagnostics-color=always)
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_compile_options (-fcolor-diagnostics)
        add_link_options (-fcolor-diagnostics)
    endif ()
endif ()



# Fails to find stddef.h, see https://github.com/include-what-you-use/include-what-you-use/blob/master/README.md#how-to-install
#find_program (IWYU_EXE NAMES include-what-you-use iwyu)
#if (NOT IWYU_EXE)
#    message (NOTICE "Could not find the program include-what-you-use")
#else ()
#    message (STATUS "Found include-what-you-use: ${IWYU_EXE}")
#    set (CMAKE_CXX_INCLUDE_WHAT_YOU_USE ${IWYU_EXE};-Xiwyu;--cxx17ns;-Xiwyu;--transitive_includes_only)
#endif ()

# Produces libm.so.6 noise
#set (CMAKE_LINK_WHAT_YOU_USE TRUE)


if (RUN_CLANG_TIDY)
    find_program (CLANG_TIDY_EXE NAMES clang-tidy clang-tidy-9)
    if (NOT CLANG_TIDY_EXE)
        message (FATAL_ERROR "Could not find the program clang-tidy!")
    endif()

    message (STATUS "Found clang-tidy: ${CLANG_TIDY_EXE}")
    set (CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY_EXE};-checks=*)
endif ()


enable_testing ()


add_subdirectory (config)
add_subdirectory (docs)
add_subdirectory (itests)
add_subdirectory (rules)
add_subdirectory (src)


message (STATUS )
message (STATUS "############# Configuration for ${PROJECT_NAME} ${PROJECT_VERSION} #############")
message (STATUS )
message (STATUS "    ENABLE_DOC                ${ENABLE_DOC}")
message (STATUS "    ENABLE_HARDENING          ${ENABLE_HARDENING}")
message (STATUS "    FAIL_ON_WARNINGS          ${FAIL_ON_WARNINGS}")
message (STATUS "    FORCE_COLORED_OUTPUT      ${FORCE_COLORED_OUTPUT}")
message (STATUS "    ENABLE_SANITIZERS         ${ENABLE_SANITIZERS}")
message (STATUS "    RUN_CLANG_TIDY            ${RUN_CLANG_TIDY}")
message (STATUS )
message (STATUS "    Compiler                  ${CMAKE_CXX_COMPILER_ID}")
message (STATUS "    Build Type                ${CMAKE_BUILD_TYPE}")
message (STATUS "    Install prefix            ${CMAKE_INSTALL_PREFIX}")
get_directory_property (DirCOpts DIRECTORY ${CMAKE_SOURCE_DIR}/src/ COMPILE_OPTIONS)
string (REGEX REPLACE "(^|[^\\\\]);" "\\1 " DirCOpts "${DirCOpts}")
message (STATUS "    Compile Options           ${DirCOpts}")
message (STATUS "    C++ Flags (General)      ${CMAKE_CXX_FLAGS}") # The mis-alignment is intentional
message (STATUS "    C++ FLags (Release)       ${CMAKE_CXX_FLAGS_RELEASE}")
message (STATUS "    C++ FLags (Debug)         ${CMAKE_CXX_FLAGS_DEBUG}")
get_directory_property (DirDefs DIRECTORY ${CMAKE_SOURCE_DIR}/src/ COMPILE_DEFINITIONS)
string (REGEX REPLACE "(^|[^\\\\]);" "\\1 " DirDefs "${DirDefs}")
message (STATUS "    Defines                   ${DirDefs}")
get_directory_property (DirLOpts DIRECTORY ${CMAKE_SOURCE_DIR}/src/ LINK_OPTIONS)
string (REGEX REPLACE "(^|[^\\\\]);" "\\1 " DirLOpts "${DirLOpts}")
message (STATUS "    Link Options              ${DirLOpts}")
message (STATUS )
message (STATUS "#########################################################")
message (STATUS )
